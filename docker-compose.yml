version: "3.9"

services:
  flask:
    image: python:${PYTHON_TAG}
    container_name: ${PROJECT_NAME}-flask
    hostname: flask
    restart: unless-stopped
    stop_grace_period: 10s
    env_file: .env
    mem_limit: 10g
    mem_reservation: 1g
    environment:
      REDIS_HOST: $REDIS_HOST
      FLASK_PORT: $FLASK_PORT
      FLASK_ENV: $FLASK_ENV
      FLASK_DEBUG: $FLASK_DEBUG
      CELERY_BROKER_URL: $CELERY_BROKER_URL
      CELERY_RESULT_BACKEND: $CELERY_RESULT_BACKEND
    build:
      dockerfile: Dockerfile
      context: ./server
      args:
        PYTHON_TAG: $PYTHON_TAG
    ports:
      - ${FLASK_PORT}:5000
    command: >
      gunicorn app:app --worker-class gevent --workers=${GUNICORN_THREADS} --threads=${GUNICORN_THREADS} -b :5000 --timeout 600 --reload --access-logfile -

  angular:
    image: python:${PYTHON_TAG}
    container_name: ${PROJECT_NAME}-angular
    hostname: angular
    restart: unless-stopped
    stop_grace_period: 10s
    env_file: .env
    environment:
      NODE_ENV: $NODE_ENV
      FLASK_HOST: nginx
      FLASK_PORT: "80"
      CHOKIDAR_USEPOLLING: $CHOKIDAR_USEPOLLING
    build: 
      dockerfile: $NODE_DOCKERFILE
      context: ./client
      args:
        NODE_TAG: $NODE_TAG
        NGINX_TAG: $NGINX_TAG
        ANGULAR_CLI_VERSION: $ANGULAR_CLI_VERSION
    ports:
      - ${NGINX_CLIENT_PORT}:3000

  mlflow:
    image: python:${PYTHON_TAG}
    container_name: ${PROJECT_NAME}-mlflow
    hostname: mlflow
    restart: unless-stopped
    stop_grace_period: 10s
    env_file: .env
    mem_limit: 10g
    mem_reservation: 1g
    environment:
      MLFLOW_BACKEND_STORE_URI: $MLFLOW_BACKEND_STORE_URI
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
    build:
      dockerfile: Dockerfile
      context: ./server
      args:
        PYTHON_TAG: $PYTHON_TAG
        FLASK_PORT: 5000
    ports:
      - ${MLFLOW_PORT}:5000
    command: >
      mlflow server  
      --serve-artifacts  
      --host 0.0.0.0 
      --port 5000  
      --backend-store-uri "${MLFLOW_BACKEND_STORE_URI}"  
      --default-artifact-root s3://mlflow/

  minio:
    image: minio/minio:${MINIO_TAG}
    container_name: ${PROJECT_NAME}-minio
    hostname: minio
    restart: unless-stopped
    stop_grace_period: 10s
    env_file: .env
    working_dir: /data
    volumes:
      - minio-data:/data
    ports:
      - ${MINIO_PORT}:9000
      - ${MINIO_CONSOLE_PORT}:9001
    environment:
      MINIO_ACCESS_KEY: $MINIO_ACCESS_KEY
      MINIO_SECRET_KEY: $MINIO_SECRET_KEY
    command: server /data --console-address ':9001' --address ':9000'

  mc:
    image: minio/mc:${MINIO_MC_TAG}
    container_name: ${PROJECT_NAME}-mc
    hostname: mc
    env_file: .env
    environment:
      MINIO_PORT: $MINIO_PORT
      MINIO_ACCESS_KEY: $MINIO_ACCESS_KEY
      MINIO_SECRET_KEY: $MINIO_SECRET_KEY
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c ' sleep 5;  
      /usr/bin/mc config host add s3 http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY} --api S3v4; 
      [[ ! -z "`/usr/bin/mc ls s3 | grep challenge`" ]] || /usr/bin/mc mb s3/mlflow; 
      /usr/bin/mc policy download s3/mlflow; 
      [[ ! -z "`/usr/bin/mc ls s3 | grep challenge`" ]] || /usr/bin/mc mb s3/data; 
      /usr/bin/mc policy download s3/data; exit 0; '

  celery:
    image: python:${PYTHON_TAG}
    container_name: ${PROJECT_NAME}-celery
    hostname: celery
    restart: unless-stopped
    stop_grace_period: 10s
    env_file: .env
    mem_limit: 10g
    mem_reservation: 1g
    environment:
      REDIS_HOST: $REDIS_HOST
      FLASK_PORT: $FLASK_PORT
      FLASK_ENV: $FLASK_ENV
      FLASK_DEBUG: $FLASK_DEBUG
      CELERY_BROKER_URL: $CELERY_BROKER_URL
      CELERY_RESULT_BACKEND: $CELERY_RESULT_BACKEND
      C_FORCE_ROOT: "true"
    build:
      dockerfile: Dockerfile
      context: ./server
      args:
        PYTHON_TAG: $PYTHON_TAG
        FLASK_PORT: $FLASK_PORT
    command: celery --app app.celery_app worker --loglevel=info

  nginx:
    image: nginx:${NGINX_TAG}
    container_name: ${PROJECT_NAME}-nginx
    hostname: nginx
    restart: unless-stopped
    stop_grace_period: 10s
    env_file: .env
    mem_limit: 10g
    mem_reservation: 1g
    ports:
      - ${NGINX_SERVER_PORT}:80
    volumes:
      - ./server:/var/www/html
      - ./services/nginx/conf.d:/etc/nginx/conf.d

  postgres:
    image: postgres:${POSTGRES_TAG}
    container_name: ${PROJECT_NAME}-postgres
    hostname: postgres
    restart: unless-stopped
    stop_grace_period: 10s
    env_file: .env
    environment:
      POSTGRES_PASSWORD: $DB_PASSWORD
      POSTGRES_DB: $DB_NAME
      POSTGRES_USER: $DB_USER
    ports:
      - ${DB_PORT}:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data

  flower:
    image: mher/flower:${FLOWER_TAG}
    container_name: ${PROJECT_NAME}-flower
    hostname: flower
    restart: unless-stopped
    stop_grace_period: 10s
    env_file: .env
    environment:
      CELERY_BROKER_URL: $CELERY_BROKER_URL
      FLOWER_PORT: "8888"
    ports:
      - ${FLOWER_PORT}:8888

  redis:
    image: redis:${REDIS_TAG}
    container_name: ${PROJECT_NAME}-redis
    hostname: $REDIS_HOST
    restart: unless-stopped
    stop_grace_period: 10s
    env_file: .env
    ports:
      - ${REDIS_PORT}:6379

  adminer:
    image: adminer:${ADMINER_TAG}
    container_name: ${PROJECT_NAME}-adminer
    hostname: adminer
    restart: unless-stopped
    stop_grace_period: 10s
    env_file: .env
    ports:
      - ${ADMINER_PORT}:8080

networks:
  default:
    name: $PROJECT_NAME

volumes:
  postgres-data: {}
  minio-data: {}
